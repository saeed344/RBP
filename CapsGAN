{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceType":"datasetVersion","sourceId":8662436,"datasetId":5119593,"databundleVersionId":8813312}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:52:31.389464Z","iopub.execute_input":"2024-06-23T20:52:31.389787Z","iopub.status.idle":"2024-06-23T20:52:32.346721Z","shell.execute_reply.started":"2024-06-23T20:52:31.389761Z","shell.execute_reply":"2024-06-23T20:52:32.345723Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/qsar-classification/4_feature_selection_correlation.py\n/kaggle/input/qsar-classification/5_Feature_Selection_RFE_RF.py\n/kaggle/input/qsar-classification/independent_test1.py\n/kaggle/input/qsar-classification/lebels.csv\n/kaggle/input/qsar-classification/training.py\n/kaggle/input/qsar-classification/TwoD_clean.csv\n/kaggle/input/qsar-classification/1D.csv\n/kaggle/input/qsar-classification/2D/EState.csv\n/kaggle/input/qsar-classification/2D/Pubchem.csv\n/kaggle/input/qsar-classification/2D/RDK5.csv\n/kaggle/input/qsar-classification/2D/FP4C.csv\n/kaggle/input/qsar-classification/2D/AP2D.csv\n/kaggle/input/qsar-classification/2D/MACCS.csv\n/kaggle/input/qsar-classification/2D/CDKExt.csv\n/kaggle/input/qsar-classification/2D/KRC.csv\n/kaggle/input/qsar-classification/2D/KR.xlsx\n/kaggle/input/qsar-classification/2D/CDKGraph.csv\n/kaggle/input/qsar-classification/2D/CDK.csv\n/kaggle/input/qsar-classification/2D/KR.csv\n/kaggle/input/qsar-classification/2D/Morgan.csv\n/kaggle/input/qsar-classification/2D/Label.csv\n/kaggle/input/qsar-classification/2D/AP2DC.csv\n/kaggle/input/qsar-classification/2D/FP4.csv\n/kaggle/input/qsar-classification/Mol2Vec/R2D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R3D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R5D300.xlsx\n/kaggle/input/qsar-classification/Mol2Vec/R8D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R7D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R5D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R7D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R4D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R6D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R5D100.xlsx\n/kaggle/input/qsar-classification/Mol2Vec/R9D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R4D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R0D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R9D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R2D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R6D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R1D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R8D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R1D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R5D100.csv\n/kaggle/input/qsar-classification/Mol2Vec/R3D300.csv\n/kaggle/input/qsar-classification/Mol2Vec/R0D300.csv\n/kaggle/input/qsar-classification/3D/AP3D.csv\n/kaggle/input/qsar-classification/3D/3DMorse.csv\n/kaggle/input/qsar-classification/3D/RDK3D.csv\n/kaggle/input/qsar-classification/3D/EC3P.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import scale,StandardScaler\n\nimport pandas as pd\nimport numpy as np\n\npath1 = '/kaggle/input/qsar-classification/2D/'\npath4 = '/kaggle/input/qsar-classification/Mol2Vec/'\n# Read data\n\n# Read data\nAP2D = pd.read_csv(path1+'AP2D.csv').iloc[:, 1:]\n\nAP2DC = pd.read_csv(path1+'AP2DC.csv').iloc[:, 1:]\n\nCDK = pd.read_csv(path1+'CDK.csv').iloc[:, 1:]\n\nCDKExt = pd.read_csv(path1+'CDKExt.csv').iloc[:, 1:]\n\nCDKGraph = pd.read_csv(path1+'CDKGraph.csv').iloc[:, 1:]\n\nEState = pd.read_csv(path1+'EState.csv').iloc[:, 1:]\n\nFP4 = pd.read_csv(path1+'FP4.csv').iloc[:, 1:]\n\nFP4C = pd.read_csv(path1+'FP4C.csv').iloc[:, 1:]\n\nKR = pd.read_csv(path1+'KR.csv').iloc[:, 1:]\n\nKRC = pd.read_csv(path1+'KRC.csv').iloc[:, 1:]\n\nMACCS = pd.read_csv(path1+'MACCS.csv').iloc[:, 1:]\n\nMorgan = pd.read_csv(path1+'Morgan.csv').iloc[:, 1:]\n\nPubchem = pd.read_csv(path1+'Pubchem.csv').iloc[:, 1:]\n\nRDK5 = pd.read_csv(path1+'RDK5.csv').iloc[:, 1:]\n\n\nR0D100 = pd.read_csv(path4+'R0D100.csv').iloc[:, 1:]\nR0D300 = pd.read_csv(path4+'R0D300.csv').iloc[:, 1:]\nR1D100 = pd.read_csv(path4+'R1D100.csv').iloc[:, 1:]\nR1D300 = pd.read_csv(path4+'R1D300.csv').iloc[:, 1:]\nR2D100 = pd.read_csv(path4+'R2D100.csv').iloc[:, 1:]\nR2D300 = pd.read_csv(path4+'R2D300.csv').iloc[:, 1:]\nR3D100 = pd.read_csv(path4+'R3D100.csv').iloc[:, 1:]\nR3D300 = pd.read_csv(path4+'R3D300.csv').iloc[:, 1:]\nR4D100 = pd.read_csv(path4+'R4D100.csv').iloc[:, 1:]\nR4D300 = pd.read_csv(path4+'R4D300.csv').iloc[:, 1:]\nR5D100 = pd.read_csv(path4+'R5D100.csv').iloc[:, 1:]\nR5D300 = pd.read_csv(path4+'R5D300.csv').iloc[:, 1:]\nR6D100 = pd.read_csv(path4+'R6D100.csv').iloc[:, 1:]\nR6D300 = pd.read_csv(path4+'R6D300.csv').iloc[:, 1:]\nR7D100 = pd.read_csv(path4+'R7D100.csv').iloc[:, 1:]\nR7D300 = pd.read_csv(path4+'R7D300.csv').iloc[:, 1:]\nR8D100 = pd.read_csv(path4+'R8D100.csv').iloc[:, 1:]\nR8D300 = pd.read_csv(path4+'R8D300.csv').iloc[:, 1:]\nR9D100 = pd.read_csv(path4+'R9D100.csv').iloc[:, 1:]\nR9D300 = pd.read_csv(path4+'R9D300.csv').iloc[:, 1:]\n\n\n# two_D_feat = np.column_stack((AP2D, AP2DC, CDK, CDKExt, CDKGraph, EState, FP4, FP4C, KR,KRC, MACCS, \n#                               Morgan, PubchemRDK5))\n\ntwo_D_feat = np.column_stack((CDK, CDKExt, KR,KRC, Pubchem,RDK5))\n\nMol2Vec_feat = np.column_stack((R0D100,R0D300,R1D100,R1D100,R1D300,R2D100,R2D300,R3D100,R3D300,\n                                R4D100,R4D300,R5D100,R5D300,R6D100,R6D300,R7D100,R7D300,R8D100,\n                                R8D300,R9D100,R9D300))\ndataset = np.column_stack((two_D_feat, Mol2Vec_feat))\ndata_train=np.array(two_D_feat)\ntwoD_Mol2Vec_feat=data_train[:,:]\nshu=scale(twoD_Mol2Vec_feat)\n[m1,n1]=np.shape(Mol2Vec_feat)\nX=shu\n# label1=np.ones((int(598),1))#Value can be changed\n# label2=np.zeros((int(508 ),1))\n# label1=np.ones((598,1))#Value can be changed\n# label2=np.zeros((508,1))\n# label=np.append(label1,label2)\n# Assuming labels have already been read\nlabels = pd.read_csv('/kaggle/input/qsar-classification/2D/Label.csv')\n\n# Convert 'active' to 1 and 'inactive' to 0\nlabels['Activity'] = labels['Activity'].map({'active': 1, 'inactive': 0})\ny = labels['Activity'].values\n\n\ndataset = np.column_stack((two_D_feat, Mol2Vec_feat))\ndata_train=np.array(dataset)\ndata_train=data_train[:,:]\n[m1,n1]=np.shape(data_train)\n# label1=np.ones((int(598),1))#Value can be changed\n# # label2=np.zeros((int(508 ),1))\n# label1=np.ones((598,1))#Value can be changed\n# label2=np.zeros((508,1))\n# label=np.append(label1,label2)\n# Standardize the data\nscaler = StandardScaler()\nshu = scaler.fit_transform(data_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:52:32.348301Z","iopub.execute_input":"2024-06-23T20:52:32.348702Z","iopub.status.idle":"2024-06-23T20:52:40.673003Z","shell.execute_reply.started":"2024-06-23T20:52:32.348669Z","shell.execute_reply":"2024-06-23T20:52:40.671976Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import mutual_info_regression\n\n\n\n# Split the dataset into features and target\nX = shu\n\n# Apply Information Gain\nig = mutual_info_regression(X, y)\n\n# Create a dictionary of feature importance scores using index-based feature names\nfeature_scores = {f\"Feature_{i}\": ig[i] for i in range(len(ig))}\n\n# Sort the features by importance score in descending order\nsorted_features = sorted(feature_scores.items(), key=lambda x: x[1], reverse=True)\n\n# Select the top 500 features\ntop_500_features = [int(feature.split('_')[1]) for feature, score in sorted_features[:500]]\n\n# Create a new dataset with only the top 500 features\nX_top_500 = X[:, top_500_features]\n\n# # Print the feature importance scores and the sorted features\n# for feature, score in sorted_features:\n#     print(\"Feature:\", feature, \"Score:\", score)\n\n# Plot a horizontal bar chart of the feature importance scores\nfig, ax = plt.subplots()\ny_pos = np.arange(len(sorted_features))\nax.barh(y_pos, [score for feature, score in sorted_features], align=\"center\")\nax.set_yticks(y_pos)\nax.set_yticklabels([feature for feature, score in sorted_features])\nax.invert_yaxis()  # Labels read top-to-bottom\nax.set_xlabel(\"Importance Score\")\nax.set_title(\"Feature Importance Scores (Information Gain)\")\n\n# Add importance scores as labels on the horizontal bar chart\nfor i, v in enumerate([score for feature, score in sorted_features]):\n    ax.text(v + 0.01, i, str(round(v, 3)), color=\"black\", fontweight=\"bold\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:56:50.522638Z","iopub.execute_input":"2024-06-23T20:56:50.523388Z","iopub.status.idle":"2024-06-23T21:05:37.987407Z","shell.execute_reply.started":"2024-06-23T20:56:50.523354Z","shell.execute_reply":"2024-06-23T21:05:37.986449Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAqkAAAHHCAYAAACcMMFwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdcklEQVR4nO3dd3wU1fo/8M8m2SRLyqYHQklC6KFIF0kI0oKCCBYuFpoCNkS4YkFFiqiAXRTEqyReRVG/KoqKUqWjUoUESAgBQoBQJAkhQNr5/eEve1mS3Znd7M7M7n7er9e+gJlnzzxnS/JwZs4ZnRBCgIiIiIhIQ7zUToCIiIiI6HosUomIiIhIc1ikEhEREZHmsEglIiIiIs1hkUpEREREmsMilYiIiIg0h0UqEREREWkOi1QiIiIi0hwWqURERESkOSxSiYhIMY8++ij69+/v0DZfe+01NG3aFN7e3rjhhhsc2raafvvtN+h0Ovz2229qp+JQvXv3Ru/eve167ogRIzB8+HDHJkSaxSKV3FJ6ejp0Ol2tj2effdYpx9y6dStmzpyJwsJCp7RfF9Wvx44dO9ROxW4LFy5Eenq62mk4TElJCWbMmIG2bdsiICAA4eHhuOGGG/DEE0/g5MmTaqfnFLm5ufjoo4/w3HPPmbYdPXoUOp0Or7/+ul1trlq1Ck8//TR69uyJtLQ0vPLKK45KVzFa/myvWLECt912G6Kjo+Hr64uwsDD06tULb7zxBoqLixXP55lnnsE333yDvXv3Kn5sUp6P2gkQOdPs2bMRHx9vtq1t27ZOOdbWrVsxa9YsjBkzBiEhIU45hidbuHAhIiIiMGbMGLVTqbPy8nL06tULBw8exOjRo/H444+jpKQEGRkZ+PzzzzFs2DDExMSonabDvfPOO4iPj8fNN9/ssDbXrVsHLy8vfPzxx/D19XVYu0qy9Nnu1asXLl++rEq/qqqq8OCDDyI9PR3t2rXDo48+isaNG+PixYvYtm0bXnjhBfz8889Yu3atzW2vWrXK7rw6duyILl264I033sB///tfu9sh18AildzaLbfcgi5duqidRp1cunQJAQEBaqehmtLSUtSrV0/tNBxq+fLl2L17N5YuXYp7773XbN+VK1dQVlamWC5Kfb7Ky8uxdOlSPPzwww5t98yZMzAYDA4r5IQQuHLlCgwGg0PaqwsvLy/4+/urcuz58+cjPT0dU6ZMwRtvvAGdTmfa98QTT+DUqVN2F4l1fa+GDx+OGTNmYOHChQgMDKxTW6RtPN1PHm3lypVITk5GQEAAgoKCMGjQIGRkZJjF/PXXXxgzZgyaNm0Kf39/1K9fHw888ADOnz9vipk5cyaeeuopAEB8fLzp0oKjR4+aTmfWdjpPp9Nh5syZZu3odDpkZmbi3nvvRWhoKJKSkkz7P/vsM3Tu3BkGgwFhYWEYMWIE8vLy7Or7mDFjEBgYiOPHj2Pw4MEIDAxEw4YN8f777wMA9u3bhz59+iAgIACxsbH4/PPPzZ5ffQnBxo0b8dBDDyE8PBzBwcEYNWoULly4UON4CxcuRGJiIvz8/BATE4PHHnusxqURvXv3Rtu2bbFz50706tUL9erVw3PPPYe4uDhkZGRgw4YNpte2+pq2v//+G1OnTkW7du0QGBiI4OBg3HLLLTVOB1Zf3/fVV1/h5ZdfRqNGjeDv74++ffvi8OHDNfL9/fffceuttyI0NBQBAQFo37493nnnHbOYgwcP4q677kJYWBj8/f3RpUsX/PDDD5KvfU5ODgCgZ8+eNfb5+/sjODi4xnGGDx+OyMhIGAwGtGzZEs8//7xZzO7du3HLLbcgODgYgYGB6Nu3L7Zv324WU/2ebdiwAY8++iiioqLQqFEj034534fTp09j7NixaNSoEfz8/NCgQQPcfvvtOHr0qNU+b968GefOnUO/fv0kX5/qPLds2YJ///vfiIyMREBAAIYNG4azZ8+a4nQ6HdLS0nDp0iXT56L6e1ZRUYGXXnoJCQkJ8PPzQ1xcHJ577jlcvXrV7FhxcXEYPHgwfv31V3Tp0gUGgwGLFy82+7zMmjULDRs2RFBQEO666y4UFRXh6tWrmDx5MqKiohAYGIixY8fWaDstLQ19+vRBVFQU/Pz80KZNGyxatKjG8S19ti1dk/r111+bfg5ERETg/vvvR35+vllM9fc7Pz8fQ4cORWBgICIjIzF16lRUVlZaff1LS0sxb948JCYm4rXXXjMrUKs1aNAAzzzzjM39BWpek2rrd7N///64dOkSVq9ebbUf5Po4kkpuraioCOfOnTPbFhERAQD49NNPMXr0aKSmpmLevHkoLS3FokWLkJSUhN27dyMuLg4AsHr1ahw5cgRjx45F/fr1kZGRgQ8//BAZGRnYvn07dDod7rjjDmRlZeGLL77AW2+9ZTpGZGSk2S9Vue6++240b94cr7zyCoQQAICXX34Z06dPx/DhwzFu3DicPXsWCxYsQK9evbB79267LjGorKzELbfcgl69emH+/PlYunQpJk6ciICAADz//PO47777cMcdd+CDDz7AqFGj0KNHjxqXT0ycOBEhISGYOXMmDh06hEWLFuHYsWOmXzzAP8X3rFmz0K9fPzzyyCOmuD///BNbtmyBXq83tXf+/HnccsstGDFiBO6//35ER0ejd+/eePzxxxEYGGgqzqKjowEAR44cwfLly3H33XcjPj4eBQUFWLx4MVJSUpCZmVnjtPncuXPh5eWFqVOnoqioCPPnz8d9992H33//3RSzevVqDB48GA0aNMATTzyB+vXr48CBA/jxxx/xxBNPAAAyMjLQs2dPNGzYEM8++ywCAgLw1VdfYejQofjmm28wbNgwi697bGwsAOC///0vXnjhhVqLgGp//fUXkpOTodfrMWHCBMTFxSEnJwcrVqzAyy+/bMolOTkZwcHBePrpp6HX67F48WL07t0bGzZsQPfu3c3afPTRRxEZGYkXX3wRly5dAiD/+3DnnXciIyMDjz/+OOLi4nDmzBmsXr0ax48fN8XUZuvWrdDpdOjYsaPFmOs9/vjjCA0NxYwZM3D06FG8/fbbmDhxIr788ktTzh9++CH++OMPfPTRRwCAm266CQAwbtw4fPLJJ7jrrrvw5JNP4vfff8err76KAwcO4LvvvjM7zqFDh3DPPffgoYcewvjx49GyZUvTvldffRUGgwHPPvssDh8+jAULFkCv18PLywsXLlzAzJkzsX37dqSnpyM+Ph4vvvii6bmLFi1CYmIihgwZAh8fH6xYsQKPPvooqqqq8NhjjwEA3n77bYuf7dqkp6dj7Nix6Nq1K1599VUUFBTgnXfewZYtW2r8HKisrERqaiq6d++O119/HWvWrMEbb7yBhIQEPPLIIxaPsXnzZhQWFmLq1Knw9vaW81bJ7q81cr6bANCmTRsYDAZs2bLF6veM3IAgckNpaWkCQK0PIYS4ePGiCAkJEePHjzd73unTp4XRaDTbXlpaWqP9L774QgAQGzduNG177bXXBACRm5trFpubmysAiLS0tBrtABAzZsww/XvGjBkCgLjnnnvM4o4ePSq8vb3Fyy+/bLZ93759wsfHp8Z2S6/Hn3/+ado2evRoAUC88sorpm0XLlwQBoNB6HQ6sWzZMtP2gwcP1si1us3OnTuLsrIy0/b58+cLAOL7778XQghx5swZ4evrKwYMGCAqKytNce+9954AIJYsWWLalpKSIgCIDz74oEYfEhMTRUpKSo3tV65cMWtXiH9ecz8/PzF79mzTtvXr1wsAonXr1uLq1aum7e+8844AIPbt2yeEEKKiokLEx8eL2NhYceHCBbN2q6qqTH/v27evaNeunbhy5YrZ/ptuukk0b968Rp7XKi0tFS1bthQARGxsrBgzZoz4+OOPRUFBQY3YXr16iaCgIHHs2DGLuQwdOlT4+vqKnJwc07aTJ0+KoKAg0atXL9O26vcsKSlJVFRUmLbL/T5cuHBBABCvvfaa1f7V5v777xfh4eE1tld/P65tszrPfv36mfVzypQpwtvbWxQWFpq2jR49WgQEBJi1uWfPHgFAjBs3zmz71KlTBQCxbt0607bY2FgBQPzyyy9msdWfl7Zt25p9vu+55x6h0+nELbfcYhbfo0cPERsba7attp8dqampomnTpmbbLH22q3NYv369EEKIsrIyERUVJdq2bSsuX75sivvxxx8FAPHiiy+atlV/v6/9DgghRMeOHUXnzp1rHOta1d+J5cuXm22vqKgQZ8+eNXtc+/7I7W9KSopZf+V+N6/VokWLGu8BuR+e7ie39v7772P16tVmD+CfkbLCwkLcc889OHfunOnh7e2N7t27Y/369aY2rr027cqVKzh37hxuvPFGAMCuXbuckvf11+19++23qKqqwvDhw83yrV+/Ppo3b26Wr63GjRtn+ntISAhatmyJgIAAs2VeWrZsiZCQEBw5cqTG8ydMmGA2EvrII4/Ax8cHP//8MwBgzZo1KCsrw+TJk+Hl9b8fOePHj0dwcDB++ukns/b8/PwwduxY2fn7+fmZ2q2srMT58+cRGBiIli1b1vr+jB071uyauOTkZAAw9W337t3Izc3F5MmTa4xOV494/v3331i3bh2GDx+Oixcvmt6P8+fPIzU1FdnZ2TVOv17LYDDg999/N10ikp6ejgcffBANGjTA448/bjptfPbsWWzcuBEPPPAAmjRpUmsulZWVWLVqFYYOHYqmTZua9jdo0AD33nsvNm/eXGMW9vjx481GyOR+H6qv/fztt99qvaTDmvPnzyM0NNSm50yYMMFslDk5ORmV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ExERkbthkepEAwYMkIyRGk29//77Jdvg6X4iIiJyNyxSVSa1Tuq9994r2cbly5cdlQ4RERGRJrBI1bhRo0ZJxvj6+iqQCREREZFybCpSg4ODnZWH5jRr1kwyRuo0+44dO6zulzNx6tSpU5IxRERERO7GpiL14sWLzspDc3JyciRjrE1YatiwIR555BGrzw8MDJQ8Bq9JJSIiIk+k+dP9Op3O6v6vv/7aKceVWsN0z549km0cOXLE6v5Lly5JtiFnRJeIiIjI3Wi+SJWSlpbmlHallnUaM2aMZBvfffddnfOYNWuWZAwnThEREZG7cfki1VmkRlL/+usvq/vz8/PRq1evOufRvXt3yRie7iciIiJ3wyLVAqlJTXImPTnCtGnTJGO4mD8RERG5G5cvUnfu3Kl2ChZ169atzm3Ur19fMoYjqURERORuXL5I1fIo4p9//ml1/yuvvCLZxuHDhyVjVq1aJTsnIiIiIlfg8kXq+fPnndLut99+65R2r/Xcc89JxsTExEjGJCcnOyIdIiIiIs1w+SLVWYYPH652CgCAY8eOScYYDAYFMiEiIiJSDotUCyoqKtROAQBQWloqGSPnxgNERERErsTli1S9Xu+UdpWave8IV65cUTsFIiIiIody+SLVWUaOHFnnNqTWWpXD19dXMkbqrlxEREREroZFqgWfffaZ1f0hISGSbUgVj/7+/pJtyCmW27RpIxlDRERE5EpcvkgNDQ11SrtSo6AXLlywuj8lJQXBwcFWY3788UfJPMrLyyVjuE4qERERuRvNF6lSo4Q+Pj5OOW5VVZXV/adPn7a6f8OGDYiIiLAa07dvX8k8Jk2aJBnDIpWIiIjcjU1FakJCgrPysCgzM9Pq/i+//NIpx5UaoZWzgL7UQvxyriWNj4+XjHEVw4YNUzsFIiIichGaH0lVy99//211f79+/azub9y4MT744APJ40gVqt99951kG1q+69a17L1BgtRKC7GxsXa1S0RERNqlmSK1T58+DmuradOmDmvLEqk7QeXn52PChAmS7fj5+Vnd/8svv0i24Uqn+60VnNb2ZWRkWNx39OjRuqREREREGqSZItVRp7WFENi2bZtD2rJGaqRV6prWal26dLG6X841tyUlJbKOpRVCiFofte2v1qZNG8nnERERkfuwu0ht2LCh6SGlW7du9h7GLmfOnHH6Mf797387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X77cdMwTJ04gKyur1tFUe1+nTp06ITMzE82aNatTrkTkeni6n4hIwuzZs7F27Vrs378fY8aMQUREhGkN1ieffBJr167FSy+9hKysLHzyySd47733MHXqVKttRkVFwWAw4JdffkFBQQGKiooAAM2bN8enn36KAwcO4Pfff8d9991n8yjlxIkTUVxcjBEjRmDHjh3Izs7Gp59+ikOHDgEAZs2ahVdffRXvvvsusrKysG/fPqSlpeHNN9+stb3z58+jT58++Oyzz/DXX38hNzcXX3/9NebPn4/bb78dAJCSkoJevXrhzjvvxOrVq5Gbm4uVK1fil19+qdPr9Mwzz2Dr1q2YOHEi9uzZg+zsbHz//feYOHGiTa8JEbkeFqlERBLmzp2LJ554Ap07d8bp06exYsUK00hop06d8NVXX2HZsmVo27YtXnzxRcyePRtjxoyx2qaPjw/effddLF68GDExMaZi7+OPP8aFCxfQqVMnjBw5EpMmTUJUVJRN+YaHh2PdunUoKSlBSkoKOnfujP/85z+mUdVx48bho48+QlpaGtq1a4eUlBSkp6eblsW6XmBgILp374633noLvXr1Qtu2bTF9+nSMHz8e7733ninum2++QdeuXXHPPfegTZs2ePrpp00jxfa+Tu3bt8eGDRuQlZWF5ORkdOzYES+++CJiYmJsek2IyPXohBBC7SSIiLTot99+w80334wLFy4gJCRE7XSIiDwKR1KJiIiISHNYpBIRERGR5vB0PxERERFpDkdSiYiIiEhzWKQSERERkeawSCUiIiIizWGRSkRERESawyKViIiIiDSHRSoRERERaQ6LVCIiIiLSHBapRERERKQ5LFKJiIiISHP+H9lWVG1sgE+fAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"code","source":"!pip install torch==1.13.0\n!install tensorflow==2.8.0\n!pip install tensorflow==2.8.0","metadata":{"execution":{"iopub.status.busy":"2024-06-23T21:08:19.823224Z","iopub.execute_input":"2024-06-23T21:08:19.824155Z","iopub.status.idle":"2024-06-23T21:08:45.467382Z","shell.execute_reply.started":"2024-06-23T21:08:19.824110Z","shell.execute_reply":"2024-06-23T21:08:45.465939Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torch==1.13.0 in /opt/conda/lib/python3.10/site-packages (1.13.0)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch==1.13.0) (4.9.0)\nRequirement already satisfied: nvidia-cuda-runtime-cu11==11.7.99 in /opt/conda/lib/python3.10/site-packages (from torch==1.13.0) (11.7.99)\nRequirement already satisfied: nvidia-cudnn-cu11==8.5.0.96 in /opt/conda/lib/python3.10/site-packages (from torch==1.13.0) (8.5.0.96)\nRequirement already satisfied: nvidia-cublas-cu11==11.10.3.66 in /opt/conda/lib/python3.10/site-packages (from torch==1.13.0) (11.10.3.66)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu11==11.7.99 in /opt/conda/lib/python3.10/site-packages (from torch==1.13.0) (11.7.99)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==1.13.0) (69.0.3)\nRequirement already satisfied: wheel in /opt/conda/lib/python3.10/site-packages (from nvidia-cublas-cu11==11.10.3.66->torch==1.13.0) (0.42.0)\ninstall: missing destination file operand after 'tensorflow==2.8.0'\nTry 'install --help' for more information.\nRequirement already satisfied: tensorflow==2.8.0 in /opt/conda/lib/python3.10/site-packages (2.8.0)\nRequirement already satisfied: absl-py>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.6.3)\nRequirement already satisfied: flatbuffers>=1.12 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (23.5.26)\nRequirement already satisfied: gast>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (0.2.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (3.10.0)\nRequirement already satisfied: keras-preprocessing>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.1.2)\nRequirement already satisfied: libclang>=9.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (16.0.6)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.26.4)\nRequirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (3.3.0)\nRequirement already satisfied: protobuf>=3.9.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (3.20.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (69.0.3)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.16.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (2.4.0)\nRequirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (4.9.0)\nRequirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.14.1)\nRequirement already satisfied: tensorboard<2.9,>=2.8 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (2.8.0)\nRequirement already satisfied: tf-estimator-nightly==2.8.0.dev2021122109 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (2.8.0.dev2021122109)\nRequirement already satisfied: keras<2.9,>=2.8.0rc0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (2.8.0)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (0.35.0)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.0) (1.51.1)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.8.0) (0.42.0)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.26.1)\nRequirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.4.6)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.5.2)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.31.0)\nRequirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.6.1)\nRequirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.8.1)\nRequirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.0.2)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (4.2.4)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.3.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.3.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2024.2.2)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=0.11.15->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.1.3)\nRequirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.5.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.2.2)\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport sys\nimport math\nimport numpy as np\nimport pandas as pd\nimport statistics\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import scale\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, optimizers\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import initializers, regularizers, constraints\nfrom tensorflow.keras.activations import sigmoid\nfrom tensorflow.keras.layers import Input, Dense, Layer, Reshape, Flatten\nfrom tensorflow.keras.layers import multiply, Add, Permute\nfrom tensorflow.keras.layers import Dropout, Lambda, Concatenate, Multiply\nfrom tensorflow.keras.layers import BatchNormalization, Activation\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, GlobalMaxPooling2D\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras.layers import UpSampling2D, Conv2D\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.optimizers import adam_v2\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.decomposition import PCA\n\nX = X_top_500\ny=y\n\n\n# Split the data into training (80%) and testing (20%) sets\nX_train, X_test, y_train, y_test = train_test_split(X, label, test_size=0.2, random_state=42)\n\n\n# Assuming X_train_whole = scale(X_train_whole)\n[sample_num, input_dimwx] = np.shape(X_train)\nX = X_train\ny = y_train\nxt = X_test\nyt = y_test\n\n\ndef get_shuffle(data, label):\n    index = np.arange(len(label))\n    np.random.shuffle(index)\n    return data[index], label[index]\n\nX, y = get_shuffle(X, y)\n\ndef scale_mean_var(input_arr, axis=0):\n    mean_ = np.mean(input_arr, axis=0)\n    scale_ = np.std(input_arr, axis=0)\n    output_arr = input_arr - mean_\n    mean_1 = output_arr.mean(axis=0)\n    if not np.allclose(mean_1, 0):\n        output_arr -= mean_1\n    scale_[scale_ == 0.0] = 1.0\n    output_arr /= scale_\n    mean_2 = output_arr.mean(axis=0)\n    if not np.allclose(mean_2, 0):\n        output_arr -= mean_2\n    return output_arr\n\n########################################################### Def Cbam\ndef channel_attention(input_feature, ratio=8):\n\tchannel_axis = 1 if K.image_data_format() == \"channels_first\" else -1\n\tchannel = input_feature.shape[channel_axis]\n\tshared_layer_one = Dense(channel//ratio,\n\t\t\t\t\t\t\t kernel_initializer='he_normal',\n\t\t\t\t\t\t\t activation = 'relu',\n\t\t\t\t\t\t\t use_bias=True,\n\t\t\t\t\t\t\t bias_initializer='zeros')\n\tshared_layer_two = Dense(channel,\n\t\t\t\t\t\t\t kernel_initializer='he_normal',\n\t\t\t\t\t\t\t use_bias=True,\n\t\t\t\t\t\t\t bias_initializer='zeros')\n\tavg_pool = GlobalAveragePooling2D()(input_feature)\n\tavg_pool = Reshape((1,1,channel))(avg_pool)\n\tassert avg_pool.shape[1:] == (1,1,channel)\n\tavg_pool = shared_layer_one(avg_pool)\n\tassert avg_pool.shape[1:] == (1,1,channel//ratio)\n\tavg_pool = shared_layer_two(avg_pool)\n\tassert avg_pool.shape[1:] == (1,1,channel)\n\tmax_pool = GlobalMaxPooling2D()(input_feature)\n\tmax_pool = Reshape((1,1,channel))(max_pool)\n\tassert max_pool.shape[1:] == (1,1,channel)\n\tmax_pool = shared_layer_one(max_pool)\n\tassert max_pool.shape[1:] == (1,1,channel//ratio)\n\tmax_pool = shared_layer_two(max_pool)\n\tassert max_pool.shape[1:] == (1,1,channel)\n\tcbam_feature = Add()([avg_pool,max_pool])\n\tcbam_feature = Activation('hard_sigmoid')(cbam_feature)\n\tif K.image_data_format() == \"channels_first\":\n\t\tcbam_feature = Permute((3, 1, 2))(cbam_feature)\n\treturn multiply([input_feature, cbam_feature])\n\n\ndef spatial_attention(input_feature):\n\tkernel_size = 7\n\tif K.image_data_format() == \"channels_first\":\n\t\tchannel = input_feature.shape[1]\n\t\tcbam_feature = Permute((2,3,1))(input_feature)\n\telse:\n\t\tchannel = input_feature.shape[-1]\n\t\tcbam_feature = input_feature\n\tavg_pool = Lambda(lambda x: K.mean(x, axis=3, keepdims=True))(cbam_feature)\n\tassert avg_pool.shape[-1] == 1\n\tmax_pool = Lambda(lambda x: K.max(x, axis=3, keepdims=True))(cbam_feature)\n\tassert max_pool.shape[-1] == 1\n\tconcat = Concatenate(axis=3)([avg_pool, max_pool])\n\tassert concat.shape[-1] == 2\n\tcbam_feature = Conv2D(filters = 1,\n\t\t\t\t\tkernel_size=kernel_size,\n\t\t\t\t\tactivation = 'hard_sigmoid',\n\t\t\t\t\tstrides=1,\n\t\t\t\t\tpadding='same',\n\t\t\t\t\tkernel_initializer='he_normal',\n\t\t\t\t\tuse_bias=False)(concat)\n\tassert cbam_feature.shape[-1] == 1\n\tif K.image_data_format() == \"channels_first\":\n\t\tcbam_feature = Permute((3, 1, 2))(cbam_feature)\n\treturn multiply([input_feature, cbam_feature])\n\n\ndef cbam_block(cbam_feature,ratio=8):\n\tcbam_feature = channel_attention(cbam_feature, ratio)\n\tcbam_feature = spatial_attention(cbam_feature, )\n\treturn cbam_feature\n\n\n############################################## Def discriminator and generator\ndef squash(vectors, axis=-1):\n    s_squared_norm = K.sum(K.square(vectors), axis, keepdims=True)\n    scale = s_squared_norm / (1 + s_squared_norm) / K.sqrt(s_squared_norm + K.epsilon())\n    return scale * vectors\n\ndef build_discriminator():\n    img = Input(shape=(1,input_dimwx,1))\n    x = Conv2D(filters=64, kernel_size=(1,9), strides=2, padding='valid', name='conv1')(img)\n    x = LeakyReLU()(x)\n    x = BatchNormalization(momentum=0.8)(x)\n\n    x = Conv2D(filters=32, kernel_size=(1,9), strides=2, padding='valid', name='conv1')(img)\n    x = LeakyReLU()(x)\n    x = BatchNormalization(momentum=0.8)(x)\n\n    \"\"\"\n    NOTE: Capsule architecture starts from here.\n    \"\"\"\n    ##### primarycaps coming first #####\n    x = Conv2D(filters=32, kernel_size=(1,3), strides=2, padding='valid', name='primarycap_conv2')(x)\n    [aa,bb,cc,dd] = x.shape\n    numx = int(cc)\n    x = Reshape(target_shape=[-1, numx], name='primarycap_reshape')(x)\n    x = Lambda(squash, name='primarycap_squash')(x)\n    x = BatchNormalization(momentum=0.8)(x)\n\n    ##### digitcaps are here #####\n    x = Flatten()(x)\n    uhat = Dense(128, kernel_initializer='he_normal', bias_initializer='zeros', name='uhat_digitcaps')(x)\n    c = Activation('softmax', name='softmax_digitcaps1')(uhat) # softmax will make sure that each weight c_ij is a non-negative number and their sum equals to one\n    c = Dense(128)(c) # compute s_j\n    x = Multiply()([uhat, c])\n    \"\"\"\n    NOTE: Squashing the capsule outputs creates severe blurry artifacts, thus we replace it with Leaky ReLu.\n    \"\"\"\n    s_j = LeakyReLU()(x)\n    ##### we will repeat the routing part 2 more times (num_routing=3) to unfold the loop\n    c = Activation('softmax', name='softmax_digitcaps2')(s_j) # softmax will make sure that each weight c_ij is a non-negative number and their sum equals to one\n    c = Dense(128)(c) # compute s_j\n    x = Multiply()([uhat, c])\n    s_j = LeakyReLU()(x)\n\n    c = Activation('softmax', name='softmax_digitcaps3')(s_j) # softmax will make sure that each weight c_ij is a non-negative number and their sum equals to one\n    c = Dense(128)(c) # compute s_j\n    x = Multiply()([uhat, c])\n    s_j = LeakyReLU()(x)\n\n    c = Activation('softmax', name='softmax_digitcaps4')(s_j) # softmax will make sure that each weight c_ij is a non-negative number and their sum equals to one\n    c = Dense(128)(c) # compute s_j\n    x = Multiply()([uhat, c])\n    s_j = LeakyReLU()(x)\n    # ##### preparition for cbam_block\n    s_j = Reshape((-1,128,1))(s_j)\n    inputs = s_j\n    residual = Conv2D(filters=64, kernel_size=(1,1), strides=1, padding='same', name='convxxx')(inputs)\n    residual = BatchNormalization(momentum=0.8)(residual)\n\n    cbam = cbam_block(residual)\n    # cbam = channel_attention(residual)\n    # cbam = spatial_attention(residual)\n\n    cbam = Reshape((-1,))(cbam)\n    pred = Dense(2, activation='sigmoid')(cbam)\n\n    # cbam = Reshape((-1,))(s_j)\n    # pred = Dense(2, activation='sigmoid')(cbam)\n\n\n    return Model(img, pred)\n\ndiscriminator = build_discriminator()\ndiscriminator.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n\n\n# generator structure\ndef build_generator():\n    \"\"\"\n    Generator follows the DCGAN architecture and creates generated image representations through learning.\n    \"\"\"\n    noise_shape =(input_dimwx,)\n    x_noise = Input(shape=noise_shape)\n    # we apply different kernel sizes in order to match the original image size\n    x = Dense(64 * 1 * input_dimwx, activation=\"relu\")(x_noise)\n    x = Reshape((1, input_dimwx, 64))(x)\n    x = BatchNormalization(momentum=0.2)(x)\n    x = UpSampling2D()(x)\n    [aa1,bb1,cc1,dd1] = x.shape\n    numx1 = int(cc1//4)\n    x = Conv2D(32, kernel_size=(2,numx1), padding=\"valid\")(x)\n    x = Activation(\"relu\")(x)\n    x = BatchNormalization(momentum=0.2)(x)\n    [aa2,bb2,cc2,dd2] = x.shape\n    #### x = UpSampling2D()(x)\n    numx2 = int(1+cc2-input_dimwx)\n    x = Conv2D(16, kernel_size=(1,numx2), padding=\"valid\")(x)\n    x = Activation(\"relu\")(x)\n    x = BatchNormalization(momentum=0.2)(x)\n    x = Conv2D(1, kernel_size=3, padding=\"same\")(x)\n    gen_out = Activation(\"tanh\")(x)\n\n    return Model(x_noise, gen_out)\n\ngenerator = build_generator()\ngenerator.compile(loss='binary_crossentropy', optimizer=adam_v2.Adam(0.002, 0.8), metrics=['binary_accuracy'])\n\n# feeding noise to generator\nz = Input(shape=(input_dimwx,))\nimg = generator(z)\n# for the combined model we will only train the generator\ndiscriminator.trainable = False\n# try to discriminate generated images\nvalid = discriminator(img)\n# the combined model (stacked generator and discriminator) takes\n# noise as input => generates images => determines validity\ncombined = Model(z, valid)\ncombined.compile(loss='binary_crossentropy', optimizer=adam_v2.Adam(0.002, 0.8), metrics=['binary_accuracy'])\n#########################################################\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.00001)\n\n\ndef categorical_probas_to_classes(p):\n    return np.argmax(p, axis=1)\n\ndef to_categorical(y, nb_classes=None):\n    y = np.array(y, dtype='int')\n    if not nb_classes:\n        nb_classes = np.max(y) + 1\n    Y = np.zeros((len(y), nb_classes))\n    for i in range(len(y)):\n        Y[i, y[i]] = 1\n    return Y\n\nBACC_collecton = []\nSn_collecton = []\nSp_collecton = []\nMCC_collecton = []\nAUC_collecton = []\nAP = []\n\nmean_recall = np.linspace(0, 1, 100)\nall_precision = []\nbase_fpr = np.linspace(0, 1, 100)\nmean_tpr = 0.0\ninterp_tpr_collection = []\n\n# Define the directory to save the models\nsave_dir = '/kaggle/working/models/'\n\nskf = StratifiedKFold(n_splits=10)\nfor fold, (train, test) in enumerate(skf.split(X, y)):\n    X_train, X_valid, y_train, y_valid = X[train], X[test], y[train], y[test]\n    y_train = to_categorical(y_train)\n\n    # Reinitialize and compile models for each fold\n    discriminator = build_discriminator()\n    discriminator.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n\n    generator = build_generator()\n    generator.compile(loss='binary_crossentropy', optimizer=adam_v2.Adam(0.002, 0.8), metrics=['binary_accuracy'])\n\n    z = Input(shape=(input_dimwx,))\n    img = generator(z)\n    discriminator.trainable = False\n    valid = discriminator(img)\n    combined = Model(z, valid)\n    combined.compile(loss='binary_crossentropy', optimizer=adam_v2.Adam(0.002, 0.8), metrics=['binary_accuracy'])\n\n    # Define checkpoint callback to save the best model\n    model_checkpoint = ModelCheckpoint(os.path.join(save_dir, f'model_fold_{fold+1}.h5'),\n                                       save_best_only=True,\n                                       monitor='val_loss',\n                                       mode='min')\n\n#     hist = combined.fit(X_train, y_train, batch_size=128, epochs=30, validation_data=(X_valid, to_categorical(y_valid)), callbacks=[model_checkpoint])\n    \n    \n\n    hist = combined.fit(X_train, y_train, batch_size=128, epochs=30, validation_data=(X_valid, to_categorical(y_valid)), \n                    callbacks=[model_checkpoint, early_stopping, reduce_lr])\n    # Load best model\n    # combined.load_weights(f'/content/drive/MyDrive/QSAR/models/model_fold_{fold+1}.h5')\n\n    y_score = combined.predict(X_valid)\n    y_class = categorical_probas_to_classes(y_score)\n\n    TP, FP, FN, TN = confusion_matrix(y_valid, y_class).ravel()\n    Sn_collecton.append(TP/(TP+FN))\n    Sp_collecton.append(TN/(TN+FP))\n    MCC = (TP*TN - FP*FN) / math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))\n    MCC_collecton.append(MCC)\n    BACC_collecton.append(0.5*TP/(TP+FN) + 0.5*TN/(TN+FP))\n\n    fpr, tpr, _ = roc_curve(y_valid, y_score[:, 1])\n    interp_tpr = np.interp(base_fpr, fpr, tpr)\n    interp_tpr[0] = 0.0\n    interp_tpr_collection.append(interp_tpr)\n    auc_roc = auc(fpr, tpr)\n    AUC_collecton.append(auc_roc)\n\n    precision, recall, _ = precision_recall_curve(y_valid, y_score[:, 1])\n    average_precision = average_precision_score(y_valid, y_score[:, 1])\n    recall = np.flipud(recall)\n    precision = np.flipud(precision)\n\n    mean_precision = np.interp(mean_recall, recall, precision)\n    all_precision.append(mean_precision)\n    AP.append(average_precision)\n    # Save the trained models\n    generator.save(os.path.join(save_dir, f'generator_model_fold_{fold+1}.h5'))\n    discriminator.save(os.path.join(save_dir, f'discriminator_model_fold_{fold+1}.h5'))\n\nprint(f'Balanced Accuracy: {np.mean(BACC_collecton):.3f} ± {np.std(BACC_collecton):.3f}')\nprint(f'Sensitivity: {np.mean(Sn_collecton):.3f} ± {np.std(Sn_collecton):.3f}')\nprint(f'Specificity: {np.mean(Sp_collecton):.3f} ± {np.std(Sp_collecton):.3f}')\nprint(f'MCC: {np.mean(MCC_collecton):.3f} ± {np.std(MCC_collecton):.3f}')\nprint(f'AUC: {np.mean(AUC_collecton):.3f} ± {np.std(AUC_collecton):.3f}')\nprint(f'Average Precision: {np.mean(AP):.3f} ± {np.std(AP):.3f}')\n\nmean_tpr = np.mean(interp_tpr_collection, axis=0)\nmean_tpr[-1] = 1.0\n\nmean_precision = np.mean(all_precision, axis=0)\n\nnp.savez('ROC_curve.npz', fpr=base_fpr, tpr=mean_tpr, roc_auc=AUC_collecton)\nnp.savez('PR_curve.npz', recall=mean_recall, precision=mean_precision, average_precision=AP)\n\nplt.figure()\nplt.plot(base_fpr, mean_tpr, color='darkorange', lw=2, label=f'ROC curve (area = {np.mean(AUC_collecton):.2f})')\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('10-fold Cross-Validation ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T21:11:51.463621Z","iopub.execute_input":"2024-06-23T21:11:51.463969Z","iopub.status.idle":"2024-06-23T21:11:54.725192Z","shell.execute_reply.started":"2024-06-23T21:11:51.463943Z","shell.execute_reply":"2024-06-23T21:11:54.723498Z"},"trusted":true},"execution_count":8,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[8], line 11\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m roc_curve, auc\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpreprocessing\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m scale\n\u001b[0;32m---> 11\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mtf\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m layers, models, optimizers\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend \u001b[38;5;28;01mas\u001b[39;00m K\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/__init__.py:37\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msys\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01m_sys\u001b[39;00m\n\u001b[1;32m     35\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtyping\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01m_typing\u001b[39;00m\n\u001b[0;32m---> 37\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mtools\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m module_util \u001b[38;5;28;01mas\u001b[39;00m _module_util\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutil\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlazy_loader\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LazyLoader \u001b[38;5;28;01mas\u001b[39;00m _LazyLoader\n\u001b[1;32m     40\u001b[0m \u001b[38;5;66;03m# Make sure code inside the TensorFlow codebase can use tf2.enabled() at import.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/__init__.py:45\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m distribute\n\u001b[1;32m     44\u001b[0m \u001b[38;5;66;03m# from tensorflow.python import keras\u001b[39;00m\n\u001b[0;32m---> 45\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m feature_column_lib \u001b[38;5;28;01mas\u001b[39;00m feature_column\n\u001b[1;32m     46\u001b[0m \u001b[38;5;66;03m# from tensorflow.python.layers import layers\u001b[39;00m\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodule\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m module\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/feature_column/feature_column_lib.py:18\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124;03m\"\"\"FeatureColumns: tools for ingesting and representing features.\"\"\"\u001b[39;00m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m# pylint: disable=unused-import,line-too-long,wildcard-import,g-bad-import-order\u001b[39;00m\n\u001b[0;32m---> 18\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column_v2\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfeature_column\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msequence_feature_column\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/feature_column/feature_column.py:143\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m sparse_tensor \u001b[38;5;28;01mas\u001b[39;00m sparse_tensor_lib\n\u001b[1;32m    142\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m tensor_shape\n\u001b[0;32m--> 143\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlayers\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m base\n\u001b[1;32m    144\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mops\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m array_ops\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mops\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m check_ops\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/layers/base.py:16\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m#\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# Licensed under the Apache License, Version 2.0 (the \"License\");\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# limitations under the License.\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# =============================================================================\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124;03m\"\"\"Contains the base Layer class, from which all layers inherit.\"\"\"\u001b[39;00m\n\u001b[0;32m---> 16\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlegacy_tf_layers\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m base\n\u001b[1;32m     18\u001b[0m InputSpec \u001b[38;5;241m=\u001b[39m base\u001b[38;5;241m.\u001b[39mInputSpec\n\u001b[1;32m     20\u001b[0m keras_style_scope \u001b[38;5;241m=\u001b[39m base\u001b[38;5;241m.\u001b[39mkeras_style_scope\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/__init__.py:25\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m distribute\n\u001b[1;32m     24\u001b[0m \u001b[38;5;66;03m# See b/110718070#comment18 for more details about this import.\u001b[39;00m\n\u001b[0;32m---> 25\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m models\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minput_layer\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Input\n\u001b[1;32m     28\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msequential\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Sequential\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/models.py:20\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ops\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend\n\u001b[0;32m---> 20\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m metrics \u001b[38;5;28;01mas\u001b[39;00m metrics_module\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m optimizer_v1\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m functional\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/metrics.py:34\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ops\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m tensor_shape\n\u001b[0;32m---> 34\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m activations\n\u001b[1;32m     35\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend\n\u001b[1;32m     36\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m base_layer\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/activations.py:18\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;124;03m\"\"\"Built-in activation functions.\"\"\"\u001b[39;00m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend\n\u001b[0;32m---> 18\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlayers\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m advanced_activations\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mgeneric_utils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m deserialize_keras_object\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mgeneric_utils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m serialize_keras_object\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/layers/__init__.py:22\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m tf2\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# Generic layers.\u001b[39;00m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m# pylint: disable=g-bad-import-order\u001b[39;00m\n\u001b[1;32m     21\u001b[0m \u001b[38;5;66;03m# pylint: disable=g-import-not-at-top\u001b[39;00m\n\u001b[0;32m---> 22\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minput_layer\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Input\n\u001b[1;32m     23\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minput_layer\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m InputLayer\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01minput_spec\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m InputSpec\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/engine/input_layer.py:24\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend\n\u001b[1;32m     23\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdistribute\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m distributed_training_utils\n\u001b[0;32m---> 24\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m base_layer\n\u001b[1;32m     25\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m keras_tensor\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mengine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m node \u001b[38;5;28;01mas\u001b[39;00m node_module\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/engine/base_layer.py:45\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m tensor_util\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m backend\n\u001b[0;32m---> 45\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m constraints\n\u001b[1;32m     46\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m initializers\n\u001b[1;32m     47\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mkeras\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m regularizers\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/constraints.py:135\u001b[0m\n\u001b[1;32m    130\u001b[0m   \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, w):\n\u001b[1;32m    131\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m w \u001b[38;5;241m*\u001b[39m math_ops\u001b[38;5;241m.\u001b[39mcast(math_ops\u001b[38;5;241m.\u001b[39mgreater_equal(w, \u001b[38;5;241m0.\u001b[39m), backend\u001b[38;5;241m.\u001b[39mfloatx())\n\u001b[1;32m    134\u001b[0m \u001b[38;5;129m@keras_export\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkeras.constraints.UnitNorm\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkeras.constraints.unit_norm\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m--> 135\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mUnitNorm\u001b[39;00m(Constraint):\n\u001b[1;32m    136\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Constrains the weights incident to each hidden unit to have unit norm.\u001b[39;00m\n\u001b[1;32m    137\u001b[0m \n\u001b[1;32m    138\u001b[0m \u001b[38;5;124;03m  Also available via the shortcut function `tf.keras.constraints.unit_norm`.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;124;03m      `(rows, cols, input_depth)`.\u001b[39;00m\n\u001b[1;32m    152\u001b[0m \u001b[38;5;124;03m  \"\"\"\u001b[39;00m\n\u001b[1;32m    154\u001b[0m   \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/keras/constraints.py:158\u001b[0m, in \u001b[0;36mUnitNorm\u001b[0;34m()\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m):\n\u001b[1;32m    155\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxis \u001b[38;5;241m=\u001b[39m axis\n\u001b[1;32m    157\u001b[0m \u001b[43m\u001b[49m\u001b[38;5;129;43m@doc_controls\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdo_not_generate_docs\u001b[49m\n\u001b[0;32m--> 158\u001b[0m \u001b[43m\u001b[49m\u001b[38;5;28;43;01mdef\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mw\u001b[49m\u001b[43m)\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m    159\u001b[0m \u001b[43m  \u001b[49m\u001b[38;5;28;43;01mreturn\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mw\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m/\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    160\u001b[0m \u001b[43m      \u001b[49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mepsilon\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mbackend\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msqrt\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    161\u001b[0m \u001b[43m          \u001b[49m\u001b[43mmath_ops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreduce_sum\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    162\u001b[0m \u001b[43m              \u001b[49m\u001b[43mmath_ops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msquare\u001b[49m\u001b[43m(\u001b[49m\u001b[43mw\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeepdims\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    164\u001b[0m \u001b[38;5;129m@doc_controls\u001b[39m\u001b[38;5;241m.\u001b[39mdo_not_generate_docs\n\u001b[1;32m    165\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_config\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/tools/docs/doc_controls.py:46\u001b[0m, in \u001b[0;36mdo_not_generate_docs\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m     40\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m _wrapped\n\u001b[1;32m     43\u001b[0m _DO_NOT_DOC \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_tf_docs_do_not_document\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m---> 46\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdo_not_generate_docs\u001b[39m(obj: T) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m T:\n\u001b[1;32m     47\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"A decorator: Do not generate docs for this object.\u001b[39;00m\n\u001b[1;32m     48\u001b[0m \n\u001b[1;32m     49\u001b[0m \u001b[38;5;124;03m  For example the following classes:\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[38;5;124;03m    obj\u001b[39;00m\n\u001b[1;32m    119\u001b[0m \u001b[38;5;124;03m  \"\"\"\u001b[39;00m\n\u001b[1;32m    120\u001b[0m   \u001b[38;5;28msetattr\u001b[39m(obj, _DO_NOT_DOC, \u001b[38;5;28;01mNone\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport sys\nimport math\nimport numpy as np\nimport pandas as pd\nimport statistics\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import scale\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models, optimizers\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras import initializers, regularizers, constraints\nfrom tensorflow.keras.activations import sigmoid\nfrom tensorflow.keras.layers import Input, Dense, Layer, Reshape, Flatten\nfrom tensorflow.keras.layers import multiply, Add, Permute\nfrom tensorflow.keras.layers import Dropout, Lambda, Concatenate, Multiply\nfrom tensorflow.keras.layers import BatchNormalization, Activation\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, GlobalMaxPooling2D\nfrom tensorflow.keras.layers import LeakyReLU\nfrom tensorflow.keras.layers import UpSampling2D, Conv2D\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.models import load_model\nfrom keras.optimizers import adam_v2\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nBiLSTM=pd.read_csv(r'/kaggle/input/qsar-model/all_BiLSTM_train_2D.csv',header=None)\n\nAttention = pd.read_csv(r'/kaggle/input/qsar-model/all_atten_train_2D.csv',header=None)\n\ndataset = np.column_stack((BiLSTM, Attention))\n\ndata_train=np.array(dataset)\ndata_train=data_train[:1106,:]\n[m1,n1]=np.shape(data_train)\n# label1=np.ones((int(598),1))#Value can be changed\n# label2=np.zeros((int(508 ),1))\nlabel1=np.ones((598,1))#Value can be changed\nlabel2=np.zeros((508,1))\nlabel=np.append(label1,label2)\nshu=scale(data_train)\n\n# Split the data into training (80%) and testing (20%) sets\nX_train, X_test, y_train, y_test = train_test_split(shu, label, test_size=0.2, random_state=42)\n\nX_ind_test = xt\n# X_independent = shu.reshape(m1, n1, 1)\n# Xt=np.reshape(test_data,(-1,1,n1))\ny_ind_test = yt\n\n# Scale the independent data using the same scaling method as the training data\ndef scale_mean_var(input_arr, axis=0):\n    mean_ = np.mean(input_arr, axis=0)\n    scale_ = np.std(input_arr, axis=0)\n    output_arr = input_arr - mean_\n    mean_1 = output_arr.mean(axis=0)\n    if not np.allclose(mean_1, 0):\n        output_arr -= mean_1\n    scale_[scale_ == 0.0] = 1.0\n    output_arr /= scale_\n    mean_2 = output_arr.mean(axis=0)\n    if not np.allclose(mean_2, 0):\n        output_arr -= mean_2\n    return output_arr\n\n# Scale the independent test data\nX_ind_test_scaled = scale_mean_var(X_ind_test)\n\n# Load the pre-trained model\ndiscriminator = load_model('/kaggle/working/models/discriminator_model_fold_2.h5')\ngenerator = load_model('/kaggle/working/models/generator_model_fold_2.h5')\n\n# Build the combined model\nz = Input(shape=(X_ind_test_scaled.shape[1],))\nimg = generator(z)\ndiscriminator.trainable = False\nvalid = discriminator(img)\ncombined = Model(z, valid)\ncombined.compile(loss='binary_crossentropy', optimizer='adam', metrics=['binary_accuracy'])\n\n# Evaluate the model on the independent test data\ny_ind_test_categorical = to_categorical(y_ind_test)\ny_score = combined.predict(X_ind_test_scaled)\ny_class = np.argmax(y_score, axis=1)\n\n# Calculate metrics\nTP, FP, FN, TN = confusion_matrix(y_ind_test, y_class).ravel()\nSn = TP / (TP + FN)\nSp = TN / (TN + FP)\nMCC = (TP * TN - FP * FN) / math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))\nBACC = 0.5 * Sn + 0.5 * Sp\n\n# ROC curve\nfpr, tpr, _ = roc_curve(y_ind_test, y_score[:, 1])\nroc_auc = auc(fpr, tpr)\n\n# PR curve\nprecision, recall, _ = precision_recall_curve(y_ind_test, y_score[:, 1])\naverage_precision = average_precision_score(y_ind_test, y_score[:, 1])\n\n# Output results\nprint(f\"BACC: {BACC:.3f}\")\nprint(f\"Sn: {Sn:.3f}\")\nprint(f\"Sp: {Sp:.3f}\")\nprint(f\"MCC: {MCC:.3f}\")\nprint(f\"AUC: {roc_auc:.3f}\")\nprint(f\"Average Precision: {average_precision:.3f}\")\n\n# Plot ROC curve\nplt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve on Independent Data')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n# Plot PR curve\nplt.figure()\nplt.step(recall, precision, where='post', color='b', alpha=0.2, label='Average precision (area = %0.2f)' % average_precision)\nplt.fill_between(recall, precision, step='post', alpha=0.2, color='b')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall Curve on Independent Data')\nplt.legend(loc=\"lower right\")\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport sys\nimport math\nimport numpy as np\nimport pandas as pd\nimport statistics\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import scale\nfrom tensorflow.keras.models import load_model\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import Input, Model\n\n# Load datasets\nBiLSTM = pd.read_csv(r'/kaggle/input/qsar-model/all_BiLSTM_train_2D.csv', header=None)\nAttention = pd.read_csv(r'/kaggle/input/qsar-model/all_atten_train_2D.csv', header=None)\ndataset = np.column_stack((BiLSTM, Attention))\n\n# Prepare training data\ndata_train = np.array(dataset)[:1106, :]\nlabel1 = np.ones((598, 1))  # Value can be changed\nlabel2 = np.zeros((508, 1))\nlabel = np.append(label1, label2)\nshu = scale(data_train)\n\n# Split the data into training (80%) and testing (20%) sets\nX_train, X_test, y_train, y_test = train_test_split(shu, label, test_size=0.2, random_state=42)\n\n# Independent test data (Assuming xt and yt are predefined)\nX_ind_test = xt\ny_ind_test = yt\n\n# Scale the independent data using the same scaling method as the training data\ndef scale_mean_var(input_arr, axis=0):\n    mean_ = np.mean(input_arr, axis=0)\n    scale_ = np.std(input_arr, axis=0)\n    output_arr = input_arr - mean_\n    mean_1 = output_arr.mean(axis=0)\n    if not np.allclose(mean_1, 0):\n        output_arr -= mean_1\n    scale_[scale_ == 0.0] = 1.0\n    output_arr /= scale_\n    mean_2 = output_arr.mean(axis=0)\n    if not np.allclose(mean_2, 0):\n        output_arr -= mean_2\n    return output_arr\n\n# Scale the independent test data\nX_ind_test_scaled = scale_mean_var(X_ind_test)\n\n# List of model filenames\nmodel_files = [f'/kaggle/working/models/discriminator_model_fold_{i}.h5' for i in range(1, 10)]\ngenerator_files = [f'/kaggle/working/models/generator_model_fold_{i}.h5' for i in range(1, 10)]\n\n# Loop through the models and evaluate each\nfor i, (discriminator_file, generator_file) in enumerate(zip(model_files, generator_files)):\n    print(f\"Evaluating model {i+1}/{len(model_files)}\")\n\n    # Load the pre-trained models\n    discriminator = load_model(discriminator_file)\n    generator = load_model(generator_file)\n\n    # Build the combined model\n    z = Input(shape=(X_ind_test_scaled.shape[1],))\n    img = generator(z)\n    discriminator.trainable = False\n    valid = discriminator(img)\n    combined = Model(z, valid)\n    combined.compile(loss='binary_crossentropy', optimizer='adam', metrics=['binary_accuracy'])\n\n    # Evaluate the model on the independent test data\n    y_ind_test_categorical = to_categorical(y_ind_test)\n    y_score = combined.predict(X_ind_test_scaled)\n    y_class = np.argmax(y_score, axis=1)\n\n    # Calculate metrics\n    TP, FP, FN, TN = confusion_matrix(y_ind_test, y_class).ravel()\n    Sn = TP / (TP + FN)\n    Sp = TN / (TN + FP)\n    MCC = (TP * TN - FP * FN) / math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))\n    BACC = 0.5 * Sn + 0.5 * Sp\n\n    # ROC curve\n    fpr, tpr, _ = roc_curve(y_ind_test, y_score[:, 1])\n    roc_auc = auc(fpr, tpr)\n\n    # PR curve\n    precision, recall, _ = precision_recall_curve(y_ind_test, y_score[:, 1])\n    average_precision = average_precision_score(y_ind_test, y_score[:, 1])\n\n    # Output results\n    print(f\"BACC: {BACC:.3f}\")\n    print(f\"Sn: {Sn:.3f}\")\n    print(f\"Sp: {Sp:.3f}\")\n    print(f\"MCC: {MCC:.3f}\")\n    print(f\"AUC: {roc_auc:.3f}\")\n    print(f\"Average Precision: {average_precision:.3f}\")\n\n    # Plot ROC curve\n    plt.figure()\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([-0.05, 1.05])\n    plt.ylim([-0.05, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title(f'ROC Curve on Independent Data for Model {i+1}')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    # Plot PR curve\n    plt.figure()\n    plt.step(recall, precision, where='post', color='b', alpha=0.2, label='Average precision (area = %0.2f)' % average_precision)\n    plt.fill_between(recall, precision, step='post', alpha=0.2, color='b')\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title(f'Precision-Recall Curve on Independent Data for Model {i+1}')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-29T17:10:32.712769Z","iopub.execute_input":"2024-05-29T17:10:32.713582Z","iopub.status.idle":"2024-05-29T17:10:59.521422Z","shell.execute_reply.started":"2024-05-29T17:10:32.713545Z","shell.execute_reply":"2024-05-29T17:10:59.520320Z"},"trusted":true},"execution_count":null,"outputs":[]}]}